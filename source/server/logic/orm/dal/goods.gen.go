// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/logic/orm/model"
)

func newGood(db *gorm.DB, opts ...gen.DOOption) good {
	_good := good{}

	_good.goodDo.UseDB(db, opts...)
	_good.goodDo.UseModel(&model.Good{})

	tableName := _good.goodDo.TableName()
	_good.ALL = field.NewAsterisk(tableName)
	_good.ID = field.NewString(tableName, "id")
	_good.Name = field.NewString(tableName, "name")
	_good.Img = field.NewString(tableName, "img")
	_good.Price = field.NewField(tableName, "price")
	_good.OriginalPrice = field.NewField(tableName, "original_price")
	_good.Desc = field.NewString(tableName, "desc")
	_good.CreatedAt = field.NewTime(tableName, "created_at")
	_good.UpdatedAt = field.NewTime(tableName, "updated_at")
	_good.DeletedAt = field.NewField(tableName, "deleted_at")
	_good.SwiperImg = field.NewString(tableName, "swiper_img")

	_good.fillFieldMap()

	return _good
}

type good struct {
	goodDo

	ALL           field.Asterisk
	ID            field.String
	Name          field.String
	Img           field.String
	Price         field.Field
	OriginalPrice field.Field
	Desc          field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	SwiperImg     field.String

	fieldMap map[string]field.Expr
}

func (g good) Table(newTableName string) *good {
	g.goodDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g good) As(alias string) *good {
	g.goodDo.DO = *(g.goodDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *good) updateTableName(table string) *good {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.Name = field.NewString(table, "name")
	g.Img = field.NewString(table, "img")
	g.Price = field.NewField(table, "price")
	g.OriginalPrice = field.NewField(table, "original_price")
	g.Desc = field.NewString(table, "desc")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.SwiperImg = field.NewString(table, "swiper_img")

	g.fillFieldMap()

	return g
}

func (g *good) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *good) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["img"] = g.Img
	g.fieldMap["price"] = g.Price
	g.fieldMap["original_price"] = g.OriginalPrice
	g.fieldMap["desc"] = g.Desc
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["swiper_img"] = g.SwiperImg
}

func (g good) clone(db *gorm.DB) good {
	g.goodDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g good) replaceDB(db *gorm.DB) good {
	g.goodDo.ReplaceDB(db)
	return g
}

type goodDo struct{ gen.DO }

func (g goodDo) Debug() *goodDo {
	return g.withDO(g.DO.Debug())
}

func (g goodDo) WithContext(ctx context.Context) *goodDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodDo) ReadDB() *goodDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodDo) WriteDB() *goodDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodDo) Session(config *gorm.Session) *goodDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodDo) Clauses(conds ...clause.Expression) *goodDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodDo) Returning(value interface{}, columns ...string) *goodDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodDo) Not(conds ...gen.Condition) *goodDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodDo) Or(conds ...gen.Condition) *goodDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodDo) Select(conds ...field.Expr) *goodDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodDo) Where(conds ...gen.Condition) *goodDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *goodDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodDo) Order(conds ...field.Expr) *goodDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodDo) Distinct(cols ...field.Expr) *goodDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodDo) Omit(cols ...field.Expr) *goodDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodDo) Join(table schema.Tabler, on ...field.Expr) *goodDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goodDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodDo) RightJoin(table schema.Tabler, on ...field.Expr) *goodDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodDo) Group(cols ...field.Expr) *goodDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodDo) Having(conds ...gen.Condition) *goodDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodDo) Limit(limit int) *goodDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodDo) Offset(offset int) *goodDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goodDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodDo) Unscoped() *goodDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodDo) Create(values ...*model.Good) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodDo) CreateInBatches(values []*model.Good, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodDo) Save(values ...*model.Good) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodDo) First() (*model.Good, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Good), nil
	}
}

func (g goodDo) Take() (*model.Good, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Good), nil
	}
}

func (g goodDo) Last() (*model.Good, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Good), nil
	}
}

func (g goodDo) Find() ([]*model.Good, error) {
	result, err := g.DO.Find()
	return result.([]*model.Good), err
}

func (g goodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Good, err error) {
	buf := make([]*model.Good, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodDo) FindInBatches(result *[]*model.Good, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodDo) Attrs(attrs ...field.AssignExpr) *goodDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodDo) Assign(attrs ...field.AssignExpr) *goodDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodDo) Joins(fields ...field.RelationField) *goodDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodDo) Preload(fields ...field.RelationField) *goodDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodDo) FirstOrInit() (*model.Good, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Good), nil
	}
}

func (g goodDo) FirstOrCreate() (*model.Good, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Good), nil
	}
}

func (g goodDo) FindByPage(offset int, limit int) (result []*model.Good, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodDo) Delete(models ...*model.Good) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodDo) withDO(do gen.Dao) *goodDo {
	g.DO = *do.(*gen.DO)
	return g
}
